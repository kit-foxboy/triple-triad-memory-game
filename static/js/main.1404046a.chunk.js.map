{"version":3,"sources":["components/StatusBar.js","components/GameCard.js","App.js","serviceWorker.js","index.js"],"names":["StatusBar","props","react_default","a","createElement","message","currentScore","topScore","GameCard","state","hasBeenClicked","render","className","onClick","_this","clickCard","src","cardName","alt","replace","clickHandler","setState","Component","App","cards","components_StatusBar","map","element","cardClickHandler","clicked","renderCards","shuffleArray","cardData","idx","images","length","push","components_GameCard","key","shortid","generate","arr","randomIdx","Math","floor","random","temp","this","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAYeA,MAVf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,SACXH,EAAAC,EAAAC,cAAA,4BAAoBH,EAAMK,cAC1BJ,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMM,YCgBnBC,6MAlBXC,MAAQ,CACJC,gBAAgB,KAGpBC,OAAS,WACL,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OAAOC,QAAS,kBAAMC,EAAKC,UAAUD,EAAKb,MAAMY,WAC3DX,EAAAC,EAAAC,cAAA,OAAKY,IAAKF,EAAKb,MAAMgB,SAAUC,IAAKJ,EAAKb,MAAMgB,SAASE,QAAQ,OAAQ,IAAM,cAK1FJ,UAAY,SAAAK,GACRN,EAAKO,SAAS,CAACX,gBAAiBI,EAAKL,MAAMC,iBAC3CU,EAAaN,EAAKL,MAAMC,8CAhBTY,aCkERC,oNA9DXd,MAAQ,CACJJ,QAAS,iBACTC,aAAc,EACdC,SAAU,EACViB,MAAO,MAaXb,OAAS,WAEL,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqB,EAAD,CAAWpB,QAASS,EAAKL,MAAMJ,QAASC,aAAcQ,EAAKL,MAAMH,aAAcC,SAAUO,EAAKL,MAAMF,WACnGO,EAAKL,MAAMe,MAAME,IAAI,SAAAC,GAAO,OAAIA,QAK7CC,iBAAmB,SAAAC,GAEf,IAAMvB,EAAgBuB,EAAW,EAAIf,EAAKL,MAAMH,aAAe,EACzDC,EAAYD,EAAeQ,EAAKL,MAAMF,SAAYD,EAAeQ,EAAKL,MAAMF,SAElFO,EAAKO,SAAS,CACVhB,QAAUwB,EAAW,yBAA2B,WAChDvB,aAAcA,EACdC,SAAUA,EACViB,MAAQK,EAAWf,EAAKgB,cAAgBhB,EAAKiB,aAAajB,EAAKL,MAAMe,YAI7EM,YAAc,WAGV,IADA,IAAME,EAAW,GACTC,EAAM,EAAGA,EAAMnB,EAAKb,MAAMiC,OAAOC,OAAQF,IAC7CD,EAASI,KAAKlC,EAAAC,EAAAC,cAACiC,EAAD,CAAUC,IAAKC,IAAQC,WAAYvB,SAAUH,EAAKb,MAAMiC,OAAOD,GAAMpB,QAASC,EAAKc,oBAGrG,OAAOI,KAGXD,aAAe,SAAAU,GACX,IAAI,IAAIR,EAAMQ,EAAIN,OAAS,EAAGF,EAAM,EAAGA,IAAO,CAE1C,IAAMS,EAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,GACvCa,EAAOL,EAAIR,GACjBQ,EAAIR,GAAOQ,EAAIC,GACfD,EAAIC,GAAaI,EAErB,OAAOL,sFAjDPM,KAAK1B,SAAS,CACVhB,QAAS0C,KAAKtC,MAAMJ,QACpBC,aAAcyC,KAAKtC,MAAMH,aACzBC,SAAUwC,KAAKtC,MAAMF,SACrBiB,MAAOuB,KAAKjB,uBAfNR,cCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCGNC,IAAS1C,OAAOT,EAAAC,EAAAC,cAACkD,EAAD,CAAKpB,OAfH,CACd,0BACA,0BACA,wBACA,yBACA,uBACA,yBACA,uBACA,wBACA,0BACA,wBACA,2BACA,6BAGuCqB,SAASC,eAAe,SD4G7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1404046a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction StatusBar(props) {\n    return(\n        <div>\n            <h1>{props.message}</h1>\n            <h2>Current Score: {props.currentScore}</h2>\n            <h2>Top Score: {props.topScore}</h2>\n        </div>\n    );\n}\n\nexport default StatusBar;","import React, { Component } from \"react\";\n\n\nclass GameCard extends Component {\n\n    state = {\n        hasBeenClicked: false\n    }\n\n    render = () => {\n        return (\n            <div className=\"card\" onClick={() => this.clickCard(this.props.onClick)}>\n                <img src={this.props.cardName} alt={this.props.cardName.replace(\".png\", \"\") + \" card\"} />\n            </div>\n        );\n    }\n\n    clickCard = clickHandler => {\n        this.setState({hasBeenClicked: !this.state.hasBeenClicked})\n        clickHandler(this.state.hasBeenClicked);\n    }\n}\n\nexport default GameCard;","import React, { Component } from \"react\";\nimport shortid from \"shortid\";\nimport { StatusBar, GameCard } from \"./components\";\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        message: \"Click to Start\",\n        currentScore: 0,\n        topScore: 0,\n        cards: []\n    }\n\n    componentDidMount() {\n        \n        this.setState({\n            message: this.state.message,\n            currentScore: this.state.currentScore,\n            topScore: this.state.topScore,\n            cards: this.renderCards()\n        });\n    }\n\n    render = () => {\n\n        return (\n            <div>\n                <StatusBar message={this.state.message} currentScore={this.state.currentScore} topScore={this.state.topScore} />\n                {this.state.cards.map(element => element)}\n            </div>\n        );\n    }\n\n    cardClickHandler = clicked => {\n\n        const currentScore = (clicked) ? 0 : this.state.currentScore + 1;\n        const topScore = (currentScore > this.state.topScore) ? currentScore : this.state.topScore;\n\n        this.setState({\n            message: (clicked) ? \"Incorrect! You lose...\" : \"Correct!\",\n            currentScore: currentScore,\n            topScore: topScore,\n            cards: (clicked) ? this.renderCards() : this.shuffleArray(this.state.cards)\n        });\n    }\n\n    renderCards = () => {\n\n        const cardData = [];\n        for(let idx = 0; idx < this.props.images.length; idx++) {\n            cardData.push(<GameCard key={shortid.generate()} cardName={this.props.images[idx]} onClick={this.cardClickHandler} />);\n        }\n\n        return cardData;\n    }\n\n    shuffleArray = arr => {\n        for(let idx = arr.length - 1; idx > 0; idx--) {\n\n            const randomIdx = Math.floor(Math.random() * idx);\n            const temp = arr[idx];\n            arr[idx] = arr[randomIdx];\n            arr[randomIdx] = temp;\n        }\n        return arr;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst imageUrls = [\n    \"images/cards/aerith.png\",\n    \"images/cards/barret.png\",\n    \"images/cards/cait.png\",\n    \"images/cards/choco.png\",\n    \"images/cards/cid.png\",\n    \"images/cards/cloud.png\",\n    \"images/cards/red.png\",\n    \"images/cards/seph.png\",\n    \"images/cards/squall.png\",\n    \"images/cards/tifa.png\",\n    \"images/cards/vincent.png\",\n    \"images/cards/yuffie.png\",\n];\n\nReactDOM.render(<App images={imageUrls}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}